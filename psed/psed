#!/usr/bin/env python


"""
psed: Python sort-of sed

Usage:
    psed [-d <what>] [-e <code> ] [-f <script> ] [<file>...]

Options:
    -h  --help         Show this screen.
    --version          Show version.
    -e <code>          Literally the code to execute
    -f <script>        Script contains the code
    -d a|t|p           Debug args, tokens, parse tree
"""

import os
import sys
import docopt
import files
import eval
from globals import g
from lexer  import PsedLexer
from myparser import PsedParser
import util

VERSION = "psed 0.01"
TRACE_FILE = 'trace-eval.txt'

def main():
    args = docopt.docopt(__doc__, version=VERSION)
    if not args['-d']:
        g.debug = ''
    else:
        g.debug = args['-d']
    if 'a' in g.debug:
        print(args)

    script = args['-f']
    source_code = args['-e']
    if not script and not source_code:
        util.fatal_error("No code given")
    if script and source_code:
        util.fatal_error("Don't use both -e and -f")

    if not source_code:
        source_code = get_script(script)

    files = args['<file>']
    if files == []:
        files.append('-')

    run_program(source_code, files)


def run_program(source_code, files):
    g.files = files
    lexer = PsedLexer()
    parser = PsedParser()
    ast = parser.parse(lexer.tokenize(source_code))
    if 'c' in g.debug:
        dump_ast(ast)
    code = translate_ast(ast)
    if 't' in g.debug:
        g.trace = open(TRACE_FILE, 'wt')
    execute_code(code, files)
    if g.trace:
        g.trace.close()
        g.trace = None


def get_script(script):
    s = os.stat(script)
    if s.st_size > 1024:
        util.fatal_error(f"script file {script} is huge")
    with open(script, 'rt') as f:
        lines = f.readlines()
    return ''.join(lines)


def translate_ast(ast):
    return ast

# 'code' is a list of statements
# Each statement is one list, perhaps with sublists.

def execute_code(code, file_list):
    first, foreach, last = find_parts(code)
    g.line_num = 0
    if first:
        eval.eval(first)
    if foreach:
        for g.file_name, g.rel_num, g.line in files.next_line(file_list):
            g.line_num += 1
            eval.eval(foreach)
    if last:
        eval.eval(last)
                

def find_parts(code):
    first = None
    last  = None
    foreach = None
    for form in code:
        # print("form =", form)
        key = form[0][1]
        if key == 'first':
            first = form
        elif key == 'last':
            last = form
        elif key == 'foreach':
            foreach = form
        else:
            util.fatal_error(f"invalid stmt: {form}")
            
    return first, foreach, last


def dump_ast(ast):
    print(ast)
    print()
    print(f"len = {len(ast)}")


if __name__ == '__main__':
    main()
